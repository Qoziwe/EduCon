import os
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_login import LoginManager
from flask_wtf.csrf import CSRFProtect
from app.config import Config
from sqlalchemy import inspect

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
db = SQLAlchemy()
migrate = Migrate()
login_manager = LoginManager()
csrf = CSRFProtect()

def create_app(config_class=Config):
    app = Flask(__name__)
    app.config.from_object(config_class)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    db.init_app(app)
    migrate.init_app(app, db)
    login_manager.init_app(app)
    csrf.init_app(app)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSRF –∑–∞—â–∏—Ç—ã
    
    # –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ db
    from app import models
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ login_manager
    from app.models import User
    
    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))
    
    login_manager.login_view = 'auth.login'
    login_manager.login_message = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.'
    login_manager.login_message_category = 'info'
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è blueprint'–æ–≤
    from app.routes.main import bp as main_bp
    from app.routes.auth import bp as auth_bp
    
    app.register_blueprint(main_bp)
    app.register_blueprint(auth_bp, url_prefix='/auth')
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    with app.app_context():
        inspector = inspect(db.engine)
        tables_exist = inspector.has_table('user')
        
        if not tables_exist:
            db.create_all()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞!")
        else:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    
    # === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
    usersdata_path = os.path.join(app.static_folder, "usersdata")
    avatars_path = os.path.join(usersdata_path, "avatars")

    os.makedirs(avatars_path, exist_ok=True)  # —Å–æ–∑–¥–∞—Å—Ç –æ–±–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

    print(f"üìÇ –ü–∞–ø–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–∫ –≥–æ—Ç–æ–≤–∞: {avatars_path}")
    
    return app
